# STATEMENTS
program        → statement* EOF ;

declaration    → classDecl
               | funDecl
               | varDecl
               | statement ;

statement      → exprStmt
               | returnStmt
               | breakStmt 
               | forStmt
               | whileStmt
               | ifStmt
               | block ;

returnStmt     → "return" expression? ";" ;

breakStmt      → "break" ";" ;

forStmt        → "for" "(" ( varDecl | exprStmt | ";" ) 
                 expression? ";"
                 expression? ")" statement ;

whileStmt      → "while" "(" expression ")" statement ;

ifStmt         → "if" "(" expression ")" statement
               ( "else" "if" "(" expression ")" statement )*
               ( "else" statement )? ;

exprStmt       → expression ";" ;

classDecl      → "class" IDENTIFIER "{" function* "}" ;

funDecl        → "fun" function ;

function       → IDENTIFIER "(" parameters? ")" block ;

parameters     → IDENTIFIER  ( "," IDENTIFIER )* ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

block          → "{" declaration* "}" ;


# EXPRESSIONS
expression     → assignment ;

assignment     → IDENTIFIER "=" assignment ;
               | comma ;

comma          → logic_or ( "," logic_or )* ;

logic_or       → logic_and ( "or" logic_and )* ;

logic_and      → ternary  ( "and" ternary )* ;

ternary        → equality ( "?" expression  ":" ternary )? ;

equality       → comparison ( ( "!=" | "==" ) comparison )* ;

comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;

term           → factor ( ( "-" | "+" ) factor )* ;

factor         → unary ( ( "/" | "*" ) unary )* ;

unary          → ( "!" | "-" ) unary
               | call ;

call           → primary ( "(" comma? ")" )* ;
               
primary        → "true" | "false" | "nil"
               | NUMBER | STRING
               | "(" expression ")"
               | IDENTIFIER 
               | lambda ;

lambda         → "fun" "(" parameters? ")" block ;
